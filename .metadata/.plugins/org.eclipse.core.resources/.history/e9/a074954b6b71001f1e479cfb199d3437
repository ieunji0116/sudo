package org.myweb.first.member.controller;

import javax.servlet.http.HttpSession;

import org.myweb.first.member.model.dto.User;
import org.myweb.first.member.model.service.MemberService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.support.SessionStatus;

@Controller // 설정 xml 에 해당 클래스를 Controller 로 자동 등록해 줌
public class MemberController {
	
	@Autowired
	private MemberService memberService;

	// 뷰페이지 내보내기용 메소드 ====================================

	// 로그인 페이지 내보내기용
	@RequestMapping(value = "loginPage.do", method = { RequestMethod.GET, RequestMethod.POST })
	public String moveLoginPage() {
		return "member/loginPage";
	}

	// 회원가입 페이지 내보내기용
	@RequestMapping("enrollPage.do") // 전송방식 생략되면 기본이 get 임
	public String moveEnrollPage() {
		return "member/enrollPage";
	}

	// 요청 받아서 모델쪽 서비스로 넘기고 결과받는 메소드 =====================

	// 로그인 처리용 메소드 : Servlet 방식으로 처리
//	@RequestMapping(value = "login.do", method = RequestMethod.POST)
//	public String loginMethod(HttpServletRequest request, HttpServletResponse response) {
//		// 객체에 저장한다면
//		User user = new User();
//		user.setUserId(request.getParameter("userid"));
//		user.setUserPwd(request.getParameter("userpwd"));
//
//		System.out.println(user + " : login "); //전송온 값 확인
//
//		return "common/main";
//	}
	
	// 로그인 처리용 메소드 : command 객체 사용
	// 서버로 전송온 paramether 값을 저장하는 객체를 command 객체라고 함
	// input 태그의 name 속성의 이름과 dto(vo) 객체의 필드명이 같으면 command 객체가 값을 자동으로 받음
	
	@RequestMapping(value = "login.do", method = RequestMethod.POST)
	public String loginMethod(User user, HttpSession session, SessionStatus status, Model model) { // 자동 객체 선언으로 세션 생성
		System.out.println(user + " : logiqfsdfn "); //전송온 값 확인
		
		User loginUser = memberService.selectLogin(user);
		System.out.println("loginUser : " + loginUser);
		
		if(loginUser != null) {	//로그인 성공시 
			session.setAttribute("loginUser", loginUser);
			status.setComplete(); //로그인 성공 결과를 보냄 (HttpStatus code 200보냄)
			return "common/main";
		}else { //로그인 실패시
			//스프링에서는 request 에 저장 처리하는 객체정보를 제공함 : Model 클래스 
			//서블렛 처럼 포워딩 못 함 => 뷰리졸버로 뷰파일명과 뷰로 내보낼 정보가 같이 전달되는 구조임
			//뷰로 전달되어 출력될 객체 정보는 Model 에 저장하면 뷰와 함께 자동 전달된다.
			return "common/error";
		}
		
		
		
	}
	
	
	

}





