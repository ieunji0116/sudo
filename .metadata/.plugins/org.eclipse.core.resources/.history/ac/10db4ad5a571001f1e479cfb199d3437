package org.myweb.first.member.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.myweb.first.member.model.dto.Member;
import org.myweb.first.member.model.dto.User;
import org.myweb.first.member.model.service.MemberService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.support.SessionStatus;

@Controller // 설정 xml 에 해당 클래스를 Controller 로 자동 등록해 줌
public class MemberController {
	//이 클래스 안의 메소드들이 잘 동작하는지 확인용 또는 전달값이나 반환된 값 확인용 로그 객체를 생성함
	private static final Logger logger = LoggerFactory.getLogger(MemberController.class);
	
	
	@Autowired
	private MemberService memberService;

	// 뷰페이지 내보내기용 메소드 ====================================

	// 로그인 페이지 내보내기용
	@RequestMapping(value = "loginPage.do", method = { RequestMethod.GET, RequestMethod.POST })
	public String moveLoginPage() {
		return "member/loginPage";
	}

	// 회원가입 페이지 내보내기용
	@RequestMapping("enrollPage.do") // 전송방식 생략되면 기본이 get 임
	public String moveEnrollPage() {
		return "member/enrollPage";
	}

	// 요청 받아서 모델쪽 서비스로 넘기고 결과받는 메소드 =====================

	// 로그인 처리용 메소드 : Servlet 방식으로 처리
//	@RequestMapping(value = "login.do", method = RequestMethod.POST)
//	public String loginMethod(HttpServletRequest request, HttpServletResponse response) {
//		// 객체에 저장한다면
//		User user = new User();
//		user.setUserId(request.getParameter("userid"));
//		user.setUserPwd(request.getParameter("userpwd"));
//
//		System.out.println(user + " : login "); //전송온 값 확인
//
//		return "common/main";
//	}
	
	// 로그인 처리용 메소드 : command 객체 사용
	// 서버로 전송온 paramether 값을 저장하는 객체를 command 객체라고 함
	// input 태그의 name 속성의 이름과 dto(vo) 객체의 필드명이 같으면 command 객체가 값을 자동으로 받음
	@RequestMapping(value = "login.do", method = RequestMethod.POST)
	public String loginMethod(User user, HttpSession session, SessionStatus status, Model model) { // 자동 객체 선언으로 세션 생성
		logger.info("login : " + user); //전송온 값 확인
		
		User loginUser = memberService.selectLogin(user);
		logger.info("loginUser : " + loginUser);
		
		if(loginUser != null) {	//로그인 성공시 
			session.setAttribute("loginUser", loginUser);
			status.setComplete(); //로그인 성공 결과를 보냄 (HttpStatus code 200보냄)
			return "common/main";
		}else { //로그인 실패시
			//스프링에서는 request 에 저장 처리하는 객체정보를 제공함 : Model 클래스 
			//서블렛 처럼 포워딩 못 함 => 뷰리졸버로 뷰파일명과 뷰로 내보낼 정보가 같이 전달되는 구조임
			//뷰로 전달되어 출력될 객체 정보는 Model 에 저장하면 뷰와 함께 자동 전달된다.
			model.addAttribute("message", "로그인 실패! 아이디나 암호를 다시 확인하세요. 또는 로그인 제한된 회원입니다. 관리자에게 문의하세요.");
			return "common/error";
		}
		
		
		
	}
	
	//로그아웃 처리용 메소드
	//요청에 대한 정송 방식 이면, method 속성 생략해도 됨.
	//method 속성 생략하면, value 속성도 표기 생략해도됨
	@RequestMapping("logout.do")
	public String logoutMethod(HttpServletRequest request, Model model) {
		HttpSession session = request.getSession(false);
		//request 에 기록된 세션 ID를 가지고, sessionScope (세션저장소)
		//해당 Id와 일치하는 세션 객체를 찾아서 반환받음
		//false 이면 세션 객체가 있다면 해당 객체를 리턴받고, 없으면 null 리턴
		
		if(session !=null) { //session 객체가 존재할 경우
			session.invalidate(); //세션 객체 없엠
			return "common/main";
		}else { //session 객체가 존재하지 않을 경우
			model.addAttribute("message", "로그인 세션이 종료 되었습니다.");
			return "common/error";
		}
	}
	
	
	//회원 가입 요청 처리용 메소드
	@RequestMapping(value = "enroll.do", method = RequestMethod.POST)
	public String memberInsertMethod(Member member, Model model) {
		logger.info("enroll.do: " + member); 		//전송온 값 확인
		
		if(memberService.insertMember(member) > 0 ) {
			return "member/loginPage";
		}else {
			model.addAttribute("message", "회원 가입 실패! 확인하고 다시 가입해 주세요.");
			return "common/error";
		}
	}
	
	//내정보보기 클릭시 회원 정보 조회 요청 처리용 메소드 

}





