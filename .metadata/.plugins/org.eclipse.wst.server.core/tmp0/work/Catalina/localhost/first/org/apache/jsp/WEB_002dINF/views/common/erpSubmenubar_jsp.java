/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-26 17:26:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class erpSubmenubar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1726027236000L));
    _jspx_dependants.put("jar:file:/D:/spring_workspace/first/src/main/webapp/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Navigation Menu</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("    margin-top: 150px; /* 네비게이션 바 높이만큼 상단 여백을 설정 */\r\n");
      out.write("    font-family: 'Arial', sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 상단 메뉴바 */\r\n");
      out.write("nav {\r\n");
      out.write("	padding: 8px ;\r\n");
      out.write("    width: 100%; /* 메뉴바 너비 */\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    top: 0;\r\n");
      out.write("    left: 0;\r\n");
      out.write("    height: 60px;\r\n");
      out.write("    background: white;\r\n");
      out.write("    color: black;\r\n");
      out.write("    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* 그림자 효과 */\r\n");
      out.write("    display: flex; /* nav 안의 요소들을 한 줄에 배치 */\r\n");
      out.write("    align-items: center;\r\n");
      out.write("}\r\n");
      out.write("nav ul {\r\n");
      out.write("    list-style: none;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: start;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    height: 100%;\r\n");
      out.write("}\r\n");
      out.write("nav ul li {\r\n");
      out.write("    margin: 0 20px; /* 메뉴 항목 간격 */\r\n");
      out.write("}\r\n");
      out.write("nav ul li a {\r\n");
      out.write("    color: black;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    padding: 15px 20px;\r\n");
      out.write("    display: block;\r\n");
      out.write("    font-size: 16px; /* 텍스트 크기 */\r\n");
      out.write("    position: relative; /* 밑줄에 대한 상대 위치 설정 */\r\n");
      out.write("    transition: background 0.3s ease, transform 0.3s ease; /* 호버 효과 애니메이션 */\r\n");
      out.write("}\r\n");
      out.write("nav ul li a::after {\r\n");
      out.write("    content: '';\r\n");
      out.write("    position: absolute;\r\n");
      out.write("    width: 0;\r\n");
      out.write("    height: 3px;\r\n");
      out.write("    background: black; /* 밑줄 색상 */\r\n");
      out.write("    left: 0;\r\n");
      out.write("    bottom: 0;\r\n");
      out.write("    transition: width 0.3s ease; /* 밑줄 애니메이션 */\r\n");
      out.write("}\r\n");
      out.write("nav ul li a:hover::after {\r\n");
      out.write("    width: 100%; /* 호버 시 밑줄이 왼쪽에서 오른쪽으로 그어짐 */\r\n");
      out.write("}\r\n");
      out.write("nav ul li a i {\r\n");
      out.write("    margin-right: 10px; /* 아이콘과 텍스트 간격 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<nav>\r\n");
      out.write("		<a href=\"main.do\" class=\"moduerp-logo\">ModuERP</a>\r\n");
      out.write("		<ul id=\"menubar\">\r\n");
      out.write("			<li><a href=\"nlist.do?page=1\"><i class=\"fas fa-bullhorn\"></i>공지사항</a></li>\r\n");
      out.write("			<li><a href=\"blist.do?page=1\"><i class=\"fas fa-clipboard\"></i>구매</a></li>\r\n");
      out.write("			<li><a href=\"moveAjax.do\"><i class=\"fas fa-code\"></i>체험페이지</a></li>\r\n");
      out.write("			<li><a href=\"moveApi.do\"><i class=\"fas fa-plug\"></i>고객서비스</a></li>\r\n");
      out.write("		</ul>\r\n");
      out.write("\r\n");
      out.write("	</nav>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
